Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

Example 3:
Input: root = []
Output: true
 
Constraints:

The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        
        if root == None:
            return True
    
        def inorder_traversal(self, current):   # Inoder traversal
            
            if(current.left == None and current.right == None):   # No children
                height = 1
                return height
            
            if current.left != None:
                left_height = inorder_traversal(self, current.left) + 1 # left subtree의 height + 1
                if(left_height == 1): # left subtree에서 height 차이 2 이상 발생
                    return 0
            else:
                left_height = 1 # left subtree가 없을 경우
                
            if current.right != None:   
                right_height = inorder_traversal(self, current.right) + 1 # right subtree의 height + 1
                if(right_height == 1): # right subtree에서 height 차이 2 이상 발생
                    return 0
            else:
                right_height = 1 # right subtree가 없을 경우
                
            if ((left_height > right_height + 1) or (right_height > left_height + 1)):  # height의 차이가 2 이상
                return 0
                    
            return max(left_height, right_height) # height가 큰 쪽을 return

        return inorder_traversal(self, root) > 0
