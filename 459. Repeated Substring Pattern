Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

 

Example 1:

Input: s = "abab"
Output: true
Explanation: It is the substring "ab" twice.
Example 2:

Input: s = "aba"
Output: false
Example 3:

Input: s = "abcabcabcabc"
Output: true
Explanation: It is the substring "abc" four times or the substring "abcabc" twice.
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.

class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:

        size = len(s)
        for i in range(1, size):
            if size % i == 0:   # i가 string 길이의 약수 일 때,
                string = s[:i] * (size // i)    # substring의 반복
                if(string == s):    # substring의 반복과 s가 같을 경우 True return
                    return True
        
        return False 
